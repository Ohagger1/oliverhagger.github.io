(function(e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (() => {
        "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this
    }).THREE = e()
})(() => {
    return (() => {
        "use strict";
        var e = function() {
            return new Error("Cannot find module './polyfills'")
        };
        "object" == typeof exports && "string" != typeof exports.nodeName && (e.exports = e());
        (() => {
            "use strict";
            var t, n = THREE.STLLoader = class {
                constructor() {
                    this.manager = THREE.DefaultLoadingManager
                }
                load(e, t, n, o) {
                    var i = this;
                    void 0 === n && (n = () => {}), void 0 === o && (o = () => {});
                    var s = new THREE.FileLoader(i.manager);
                    s.setPath(this.path), s.setResponseType("arraybuffer"), s.load(e, (e) => {
                        n(i.parse(e))
                    }, t, o)
                }
                parse(e) {
                    function t(e, t) {
                        return e.charCodeAt(t) + (e.charCodeAt(t + 1) << 8)
                    }

                    function n(e, t, n) {
                        for (var r = Math.pow(10, n), a = Math.floor(e * r) / r, o = t; o < a.length; o++)
                            if (0 === a[o]) return o - 1;
                        return a.length
                    }

                    function r(e) {
                        var t = n(e, 0, 0),
                            r = n(e, 4, 0),
                            a = n(e, 8, 0);
                        return r = t << 8 | r << 16 | 0, 4 === t && (r = -16777216), r
                    }
                    var a, i, s = [],
                        o = e.byteLength,
                        l = 0,
                        c = 0,
                        u = new DataView(e);
                    if ("solid" === String.fromCharCode(u.getUint8(0))) {
                        for (var f = 80; f < o; f++)
                            if (0 === u.getUint8(f)) {
                                l = f + 1;
                                break
                            }
                        for (f = l; f < o;)
                            if (t(u, 0, f), 65536 !== a) return;
                        n(u, 0, f), f++;
                        for (var h = 0, p = 0, d = 0; f < o;) {
                            for (h = r(u.buffer.slice(f, f + 4)), p = f + 12 + 50; t(u, 0, p) != h && f < o;) p += 50;
                            for (f = p + 50; f < o;) {
                                if ((a = r(u.buffer.slice(f, f + 4))) === r(0)) {
                                    f += 12;
                                    continue
                                }
                                if (65536 !== a) {
                                    s.push(h);
                                    break
                                }
                                a = r(u.buffer.slice(f + 12, f + 16)), s.push(a), s.push(h), f += 12
                            }
                            for (d += s.length / 3 - 1; 0 < d;) {
                                for (; f < o && 0 === u.getUint8(f);) f++;
                                for (; f < o && 0 !== u.getUint8(f);) f++;
                                d--
                            }
                        }
                    } else
                        for (f = 80; f < o; f += 50) a = new THREE.Vector3, t = u.getFloat32(f, !0), i = u.getFloat32(f + 4, !0), a.set(t, i, u.getFloat32(f + 8, !0)), s.push(a);
                    return s
                }
            }
        })()
        return n
    });
})
